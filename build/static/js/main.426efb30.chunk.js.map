{"version":3,"sources":["serviceWorker.js","App.js","UpdateForm.js","Router.js","index.js"],"names":["Boolean","window","location","hostname","match","ipcRenderer","require","App","state","items","showUpdateForm","id","send","axios","get","then","response","setState","data","console","log","catch","error","className","Jumbotron","Button","variant","Container","fluid","Row","Table","striped","bordered","hover","responsive","this","map","item","key","width","height","src","avatar","alt","first_name","last_name","email","ButtonGroup","size","onClick","Col","Component","UpdateForm","props","userId","Router","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0ICHAC,EAAcJ,OAAOK,QAAQ,YAAYD,YA2FhCE,E,4MAxFbC,MAAQ,CACNC,MAAO,I,EAiBTC,eAAiB,SAACC,GAChBN,EAAYO,KAAK,2BAA4BD,I,kEAf1B,IAAD,OAClBE,IACGC,IAAI,sCACJC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZR,MAAOO,EAASE,KAAKA,OAEvBC,QAAQC,IAAIJ,EAASE,KAAKA,SAE3BG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAQR,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,6CACA,6JAIA,2BACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,gBAGJ,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACtC,+BACE,4BACE,iCACA,sCACA,0CACA,yCACA,qCACA,wCAGJ,+BACGC,KAAK3B,MAAMC,MAAM2B,KAAI,SAACC,GAAD,OACpB,wBAAIC,IAAKD,EAAK1B,IACZ,4BAAK0B,EAAK1B,IACV,4BACE,yBACE4B,MAAO,IACPC,OAAQ,IACRjB,UAAU,OACVkB,IAAKJ,EAAKK,OACVC,IACEN,EAAKO,WAAa,IAAMP,EAAKQ,UAAY,eAI/C,4BAAKR,EAAKO,YACV,4BAAKP,EAAKQ,WACV,4BAAKR,EAAKS,OACV,4BACE,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAKzB,UAAU,QAC/B,kBAACE,EAAA,EAAD,CAAQwB,QAAS,kBAAM,EAAKvC,eAAe2B,EAAK1B,MAAhD,UAGA,kBAACc,EAAA,EAAD,wBAQd,kBAACI,EAAA,EAAD,KACE,kBAACqB,EAAA,EAAD,a,GAjFMC,aCqBHC,GApCKnD,OAAOK,QAAQ,YAAYD,Y,kDAO7C,WAAYgD,GAAQ,IAAD,8BACjB,cAAMA,IALR7C,MAAQ,CACN8C,OAAQ,GAKRnC,QAAQC,IAAI,QAFK,E,iEAMjBD,QAAQC,IAAI,a,0CAIZD,QAAQC,IAAI,wB,+BAUZ,OACE,6BACE,kBAACK,EAAA,EAAD,aADF,UAEUU,KAAK3B,MAAM8C,Y,GA5BFH,cCUVI,EATA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjC,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,UAAUC,UAAWN,OCH7CO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM+C,c","file":"static/js/main.426efb30.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\n\nimport axios from \"axios\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Container,\n  Row,\n  Col,\n  ButtonGroup,\n  Button,\n  Jumbotron,\n  Table,\n} from \"react-bootstrap\";\n\nconst ipcRenderer = window.require(\"electron\").ipcRenderer;\n\nclass App extends Component {\n  state = {\n    items: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://reqres.in/api/users?page=1\")\n      .then((response) => {\n        this.setState({\n          items: response.data.data,\n        });\n        console.log(response.data.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  showUpdateForm = (id) => {\n    ipcRenderer.send(\"show-update-form-with-id\", id);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron>\n          <h1>Hello, world!</h1>\n          <p>\n            This is a simple hero unit, a simple jumbotron-style component for\n            calling extra attention to featured content or information.\n          </p>\n          <p>\n            <Button variant=\"primary\">Learn more</Button>\n          </p>\n        </Jumbotron>\n        <Container fluid>\n          <Row>\n            <Table striped bordered hover responsive>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  <th>Avatar</th>\n                  <th>First Name</th>\n                  <th>Last Name</th>\n                  <th>Email</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.items.map((item) => (\n                  <tr key={item.id}>\n                    <td>{item.id}</td>\n                    <td>\n                      <img\n                        width={128}\n                        height={128}\n                        className=\"mr-3\"\n                        src={item.avatar}\n                        alt={\n                          item.first_name + \" \" + item.last_name + \"'s Avatar\"\n                        }\n                      />\n                    </td>\n                    <td>{item.first_name}</td>\n                    <td>{item.last_name}</td>\n                    <td>{item.email}</td>\n                    <td>\n                      <ButtonGroup size=\"lg\" className=\"mb-2\">\n                        <Button onClick={() => this.showUpdateForm(item.id)}>\n                          Update\n                        </Button>\n                        <Button>Delete</Button>\n                      </ButtonGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </Row>\n          <Row>\n            <Col></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nconst ipcRenderer = window.require(\"electron\").ipcRenderer;\n\nclass UpdateForm extends Component {\n  state = {\n    userId: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    console.log(\"TEST\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"Updated\");\n  }\n\n  componentDidMount() {\n    console.log(\"Update Form Loaded\");\n    // ipcRenderer.on(\"user\", (event, args) => {\n    //   console.log(\"Fired User Id In UpdateForm\", args);\n    //   this.setState({\n    //     userId: args,\n    //   });\n    // });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button>Test</Button>\n        TEST : {this.state.userId}\n      </div>\n    );\n  }\n}\n\nexport default UpdateForm;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport App from \"./App\";\nimport UpdateForm from \"./UpdateForm\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route exact path=\"/update\" component={UpdateForm} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Router from \"./Router\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}